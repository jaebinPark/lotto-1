
name: Deploy to GitHub Pages

on:
push:
branches: [ "main" ]
workflow_dispatch:

permissions:
contents: read
pages: write
id-token: write

concurrency:
group: "pages"
cancel-in-progress: true

jobs:
build:
runs-on: ubuntu-latest
steps:
- name: Checkout
uses: actions/checkout@v4

# Node 스크립트가 있을 때만 준비 (package.json이 존재하면 동작)
- name: Setup Node (conditional)
if: ${{ hashFiles('package.json') != '' }}
uses: actions/setup-node@v4
with:
node-version: '20'

- name: Install deps (conditional)
if: ${{ hashFiles('package.json') != '' }}
run: npm ci

# (선택) 전체/갱신 크롤링 스크립트가 있을 때만 실행
- name: Build draws (conditional)
if: ${{ hashFiles('scripts/build-draws.mjs') != '' }}
run: node scripts/build-draws.mjs

- name: Build ANTI (conditional)
if: ${{ hashFiles('scripts/build-anti.mjs') != '' }}
run: node scripts/build-anti.mjs

- name: Prepare dist (copy only publish files)
shell: bash
run: |
set -e
mkdir -p dist
for p in index.html 404.html styles.css manifest.webmanifest sw.js; do
[ -f "$p" ] && cp "$p" dist/
done
[ -d icons ] && cp -r icons dist/
[ -d data ] && cp -r data dist/
[ -d js ] && cp -r js dist/
# Jekyll 해제
touch dist/.nojekyll

- name: Upload artifact
uses: actions/upload-pages-artifact@v3
with:
path: dist

deploy:
needs: build
runs-on: ubuntu-latest
environment:
name: github-pages
url: ${{ steps.deployment.outputs.page_url }}
steps:
- name: Deploy to GitHub Pages
id: deployment
uses: actions/deploy-pages@v4